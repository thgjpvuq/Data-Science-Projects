install.packages("Rcpp")
library(rmarkdown)
---
title: "R Notebook"
output: html_notebook
---
plot(cars)
```{r}
render("1-example.Rmd")
plot(cars)
# create a data frame
df <- data.frame(
Name = c('a', 'b', 'c'),
Value = c(1, 2, 3))
# display the data frame
print(df)
# create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
print(df)
plot(df)
# create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
print(df)
plot(df)
type(df)
?type
typeof(df)
typeof(Name)
as.factor(df)
as.vector(df)
plot(df)
typeof("a")
df$Name <- as.factor(df$Name)
typeof(df$Name)
plot(df)
# plot using default parameter order
plot(df$Name, df$Value)
plot(df)
# plot using named parameter
plot(
x = df$name,
y = df$Value)
# plot using named parameter
plot(
x = df$Name,
y = df$Value)
# create bar chart
barplot(
names = df$Name,
height = df$Value,
col = "skyblue",
main = 'Hello World',
xlab = 'Name',
ylab = 'Value')
?plot
?barplot
# plotting with base R
# plotting with lattice
library(lattice)
# plot with defaults
dotplot(
X = VALUE ~ Name,
data = df)
# plot with defaults
dotplot(
x = VALUE ~ Name,
data = df)
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
# create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
print(df)
# plot data frame using default parameters
df$Name <- as.factor(df$Name)
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
# create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
View(df)
View(df)
install.packages("lattice")
source("~/GitHub/Data-Science-Projects/R-Projects/Beginning Data Visualization with R/module2.R")
install.packages("lattice")
# install.packages("lattice")
library(lattice)
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
# create a data frame
df <- data.frame(
Name = c("a", "b", "c"),
Value = c(1, 2, 3))
# install.packages("lattice")
library(lattice)
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
# plot data frame using default parameters
df$Name <- as.factor(df$Name)
plot(df)
# plot with defaults
dotplot(
X = Value ~ Name,
data = df)
?dotplot
source("~/GitHub/Data-Science-Projects/R-Projects/Beginning Data Visualization with R/module2.R")
source("~/GitHub/Data-Science-Projects/R-Projects/Beginning Data Visualization with R/module2.R")
source("~/GitHub/Data-Science-Projects/R-Projects/Beginning Data Visualization with R/module2.R")
# Define UI
ui <- fluidPage(
titlePanel(
h1("Iris Shiny App")),
sidebarLayout(
sidebarPanel(
"sidebar panel",
selectInput("var", "1. Select variable", choices =c(
1 = "Sepal.Length",
2 = "Petal.Length",
3 = "Petal.Width")),
sliderInput("slider1", h3("slider1"),
min = 0, max = 100, value = 50),
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1))),
mainPanel(
"main panel",
plotOutput("iris_plot1")
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h1("Iris Shiny App")),
sidebarLayout(
sidebarPanel(
"sidebar panel",
selectInput("var", "1. Select variable", choices =c(
1 = "Sepal.Length",
2 = "Petal.Length",
3 = "Petal.Width")),
sliderInput("slider1", h3("slider1"),
min = 0, max = 100, value = 50),
)
),
mainPanel(
"main panel",
plotOutput("iris_plot1")
)
)
# Define server logic
server <- function(input, output) {
output$iris_plot1 <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm])
})
}
library(shiny)
# load iris data set
data("iris")
iris
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel(
"sidebar panel",
selectInput(
"color",
label = "Select color",
choices = c("blue",
"orange",
"yellow"),
selected = "blue"
)
),
mainPanel(
"main panel",
plotOutput(
"SL" # Sepal.Length
),
plotOutput(
"SW" # Sepal.Width
),
plotOutput(
"PL" # Petal.Length
)
)
)
)
# Define server logic
server <- function(input, output) {
output$SL <- renderPlot({
hist(
x = iris$Sepal.Length,
main = "Sepal.Length",
xlab = "cm",
col = input$color)
})
output$SW <- renderPlot({
hist(
x = iris$Sepal.Width,
main = "Sepal.Width",
xlab = "cm")
})
output$PL <- renderPlot({
hist(
x = iris$Petal.Length,
main = "Petal.Length",
xlab = "cm")
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
library(RColorBrewer)
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
# Define UI
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel(
"sidebar panel",
selectInput(
"color",
label = "Select color",
choices = c("blue",
"orange",
"yellow"),
selected = "blue"
)
),
mainPanel(
"main panel",
plotOutput(
"SL" # Sepal.Length
),
plotOutput(
"SW" # Sepal.Width
),
plotOutput(
"PL" # Petal.Length
)
)
)
)
# Define server logic
server <- function(input, output) {
output$SL <- renderPlot({
hist(
x = iris$Sepal.Length,
main = "Sepal.Length",
xlab = "cm",
col = input$color,
alpha = 0.5)
})
output$SW <- renderPlot({
hist(
x = iris$Sepal.Width,
main = "Sepal.Width",
xlab = "cm",
col = input$color)
})
output$PL <- renderPlot({
hist(
x = iris$Petal.Length,
main = "Petal.Length",
xlab = "cm",
col = input$color)
})
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
runApp('GitHub/Data-Science-Projects/R-Projects/myapp')
setwd("~/GitHub/Data-Science-Projects/R-Projects/Machine Learning with R-Kaggle")
housing <- load.csv("housing.csv")
housing <- read.csv("housing.csv")
housing <- data.frame(ocean_proximity, households)
housing <- data.frame(housing$ocean_proximity, housing$households)
housing<- unique(housing)
housing
head(housing)
?plot
hist(
x = housing$ocean_proximity,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
plot(
x = housing$ocean_proximity,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$ocean_proximity,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$population,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
housing <- read.csv("housing.csv")
hist(
x = housing$,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$ocean_proximity,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
head(housing)
hist(
x = housing$population,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$population,
y = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
ylim = 1000
)
hist(
x = housing$households
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
bins = 50
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30,
ylim = 3000
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30,
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30,
xlim = 3000
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 30,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 20,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 25,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 35,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 55,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 35,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 20,
col = "orange"
)
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 25,
col = "orange"
)
# Input load. Please do not change #
`dataset` = read.csv('C:/Users/jacob/REditorWrapper_478c83e3-573d-4d69-8cef-efb482169be0/input_df_1c0aff7e-e79a-44ec-8579-12cdbf5b7b7c.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
dataset <- data.frame(ocean_proximity, households)
dataset <- unique(dataset)
# Paste or type your script code here:
hist(
x = housing$households,
main = "Households by Ocean Proximity",
xlab = "Proximity to ocean",
ylab = "Number of Households",
breaks = 25,
col = "orange"
)
library(ggplot2)
library(ggplot2)
dataset <- read.csv("movies.csv")
library(ggplot2)
dataset <- read.csv("movies.csv")
library(ggplot2)
dataset <- read.csv("movies.csv")
setwd("~/GitHub/Data-Science-Projects/R-Projects/Machine Learning with R-Kaggle")
dataset <- read.csv("movies.csv")
dataset <- read.csv("movies.csv")
dataset <- read.csv("Movies.csv")
