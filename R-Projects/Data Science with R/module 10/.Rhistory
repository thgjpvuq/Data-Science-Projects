setwd("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 9")
data(iris)
head(iris)
set.seed(42)
indexes <- sample(
x = 1:150,
size = 100
)
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 9/Machine Learning.R")
# inspect indexes
print(indexes)
# create a training set
train <- iris[indexes, ]
# create a test set
test <- iris[-indexes, ]
install.packages("tree")
library(tree)
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 9/Machine Learning.R")
# train decision tree model
model <- tree(
formula = Species ~ .,
data = train)
# inspect the model
summary(model)
# visualize the decision tree model
plot(model)
text(model)
# load color brewer
install.packages("color brewer")
# load color brewer
install.packages("RColorBrewer")
library(RColorBrewer)
# create color palette
palette <- brewer.pal(3, "Set2")
# create scatterplot colored by species
plot(
x = iris$Sepal.Length,
y = iris$Sepal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE)
# plot decision boundaries
partition.tree(
tree = model,
label = "Species")
# plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE)
# visualize the decision tree model
plot(model)
text(model)
# create scatterplot colored by species
plot(
x = iris$Sepal.Length,
y = iris$Sepal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# plot decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE)
# predict with model
predictions <- predict(
object = model,
newdata = test,
type = "class")
# create confusion matrix
table(
x = predictions,
y = test$Species)
# load caret package
install.packages("caret")
# load caret package
# install.packages("caret")
library(caret)
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 9/Machine Learning.R")
# evaluate the prediction results
confusionMatrix(
data = predictions,
reference = test$Species)
# save the tree model
save(model, file = "Tree.RData")
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 9/Machine Learning.R")
setwd("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10")
setwd("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10")
# load shiny
install.packages("shiny")
library(shiny)
# create ui
ui <- fluidPage("Hello World!")
# create a shiny app
shinyApp(
ui = ui,
server = server)
# create server
server <- function(input, output) {}
# create a shiny app
shinyApp(
ui = ui,
server = server)
# create UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
paste("You selected ", input$num )})}
output$text <- renderText({
paste("You selected ", input$num )})
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10/Deploying R to Production.R")
# create ui
ui <- fluidPage("Hello World!")
# create server
server <- function(input, output) {}
# create a shiny app
shinyApp(
ui = ui,
server = server)
# create UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
# create a server that maps input to output
server <- function(input, output) {
output$text <- renderText({
paste("You selected ", input$num )})
}
# create a shiny app
shinyApp(
ui = ui,
server = server)
# load tree model
load("Tree.RData")
#load color brewer
library(RColorBrewer)
# create a color palette
palette <- brewer.pal(3, "Set2")
# create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10/Deploying R to Production.R")
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10/Deploying R to Production.R")
source("~/GitHub/Data-Science-Projects/R-Projects/Data Science with R/module 10/Deploying R to Production.R")
output$text = renderText({
# create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
server <- function(input, output) {
output$text = renderText({
# create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
# create shiny app
shinyApp(
ui = ui,
server = server)
server <- function(input, output) {
output$text = renderText({
# create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
# create shiny app
shinyApp(
ui = ui,
server = server)
